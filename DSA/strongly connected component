#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> adj, adj_rev;
vector<vector<int>> adj_scc;
int used[300001];
int ar[300001];
vector<int> order, component;
vector<int> root_nodes;
void dfs1(int v)
{
    used[v] = true;
    for (auto u : adj[v])
        if (!used[u])
            dfs1(u);
    order.push_back(v);
}
void dfs2(int v)
{
    used[v] = true;
    component.push_back(v);
    for (auto u : adj_rev[v])
        if (!used[u])
            dfs2(u);
}
int32_t main()
{
    int tt;
    int n, m;
    cin >> n >> m;
    adj.resize(n + 2);
    adj_rev.resize(n + 2);
    for (int i = 0; i < m; i++)
    {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj_rev[y].push_back(x);
    }
    for (int i = 1; i <= n; i++)
        if (!used[i])
            dfs1(i);
    for (int i = 1; i <= n; i++)
        used[i] = 0;
    reverse(order.begin(), order.end());
    for (auto v : order)
    {
        if (!used[v])
        {
            dfs2(v);
            component.clear();
        }
    }
    /* Condensation
    vector<int>roots(n,0);
    adj_scc.resize(n+2);
    for(auto v: order)
    {
        if(!used[v])
        {
            dfs2(v);
            int root = component.front();
            for(auto u: component) roots[u] =root;
            root_nodes.push_back(root);
            component.clear();
        }
    }
    for(int v=1; v<=n; v++)
    {
        for(auto u: adj[v])
        {
            int root_v=roots[v];
            int root_u=roots[u];
            if(root_u!=root_v)
                adj_scc[root_v].push_back(root_u);
        }
    }
    for(int i=1;i<=n;i++)
    {  cout<<i<<"->";
        for(auto x: adj_scc[i]) cout<<x<<' ';
        cout<<endl;
    }
    */
}
